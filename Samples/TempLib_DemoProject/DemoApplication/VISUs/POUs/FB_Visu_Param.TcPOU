<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.5">
  <POU Name="FB_Visu_Param" Id="{d370d93e-1e75-477c-8f64-76e6a61c8be7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Visu_Param
VAR_IN_OUT
	stMParam_Visu:	ST_Param_Visu;
	stParamsUnsave:st_ParamsUnsave;
END_VAR
VAR
	nIdx:INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF aaaPfwTempMparamFromHmi[nVisuCount].InUse THEN
	stMParam_Visu.sInUse:='Is In Use';
ELSE
	stMParam_Visu.sInUse:='Not In Use'; 
END_IF




FOR nIdx:=1 TO cnParamsArrayLast BY 1 DO
	// Get
	stMParam_Visu.bBoolAktValue[nIdx]:=GetBOOL(nVisuCount, nIdx);
	stMParam_Visu.fLrealAktValue[nIdx]:=GetLreal(nVisuCount, nIdx);
	stMParam_Visu.nDintAktValue[nIdx]:=GetInt(nVisuCount, nIdx);
	stMParam_Visu.nEnumAktValue[nIdx]:=GetEnum(nVisuCount, nIdx);
	
	// Set
	IF stMParam_Visu.bBoolSetValue[nIdx] THEN
		stMParam_Visu.bBoolSetValue[nIdx]:=FALSE;
		SetBool(nVisuCount,nIdx);
	END_IF
	
	IF stMParam_Visu.bLrealSetValue[nIdx] THEN
		stMParam_Visu.bLrealSetValue[nIdx]:=FALSE;
		SetLreal(nVisuCount,nIdx, stMParam_Visu.fLrealNewValue[nidx]);
	END_IF
	
	
	IF stMParam_Visu.bDintSetValue[nIdx] THEN
		stMParam_Visu.bDintSetValue[nIdx]:=FALSE;
		SetInt(nVisuCount,nIdx,DINT_TO_INT(stMParam_Visu.nDintNewValue[nidx]));
	END_IF
	
	IF stMParam_Visu.bEnumSetValue[nIdx] THEN
		stMParam_Visu.bEnumSetValue[nIdx]:=FALSE;
		SetEnum(nVisuCount,nIdx,stMParam_Visu.nEnumNewValue[nidx]);
	END_IF
END_FOR
]]></ST>
    </Implementation>
    <Method Name="SetInt" Id="{395b31c2-c94b-4980-bc88-0c7f522f8996}">
      <Declaration><![CDATA[METHOD SetInt : INT
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
	nValue:	INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 
1:
	aaaPfwTempMparamFromHmi[nZone].App_HmiType:=nValue;
2:
	aaaPfwTempMparamFromHmi[nZone].TermChannel:=nValue;
3:
	aaaPfwTempMparamFromHmi[nZone].ExtruderId:=nValue;
4:
	aaaPfwTempMparamFromHmi[nZone].ModuleId:=nValue;
5:
	aaaPfwTempMparamFromHmi[nZone].ZoneId:=nValue;
6:
	aaaPfwTempMparamFromHmi[nZone].SupplyId:=nValue;
7:
	aaaPfwTempMparamFromHmi[nZone].CJ_CompMode:=nValue;
8:
	aaaPfwTempMparamFromHmi[nZone].CJ_CompZone:=nValue;
9:
	aaaPfwTempMparamFromHmi[nZone].SensTermSwapIdx:=nValue;
10:
	aaaPfwTempMparamFromHmi[nZone].HeaterSwapIdx:=nValue;
11:
	aaaPfwTempMparamFromHmi[nZone].CoolerSwapIdx:=nValue;
12:
	aaaPfwTempMparamFromHmi[nZone].nPwmFactorC:=nValue;

ELSE
	;
END_CASE

stParamsUnsave.mParams[nZone]:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetEnum" Id="{3eb167fb-1167-4996-be26-c85845ce4439}">
      <Declaration><![CDATA[METHOD SetEnum : DINT
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
	nValue:	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 

1:
	aaaPfwTempMparamFromHmi[nZone].OutputSel_H:=DINT_TO_INT(nValue);
2:
	aaaPfwTempMparamFromHmi[nZone].OutputSel_C:=DINT_TO_INT(nValue);
3:
	aaaPfwTempMparamFromHmi[nZone].TempSensTerm:=DINT_TO_INT(nValue);
4:
	aaaPfwTempMparamFromHmi[nZone].SensorType:=DINT_TO_INT(nValue);
ELSE
;
END_CASE
	
stParamsUnsave.mParams[nZone]:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnum" Id="{55a21d78-e332-4dc8-b225-fb2a9e19847b}">
      <Declaration><![CDATA[METHOD GetEnum : DINT
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 

1:
	GetEnum:=aaaPfwTempMparamFromHmi[nZone].OutputSel_H;
2:
	GetEnum:=aaaPfwTempMparamFromHmi[nZone].OutputSel_C;
3:
	GetEnum:=aaaPfwTempMparamFromHmi[nZone].TempSensTerm;
4:
	GetEnum:=aaaPfwTempMparamFromHmi[nZone].SensorType;
ELSE
	GetEnum:=-1;
END_CASE
	]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLreal" Id="{5fe2ea2c-79b9-40f9-a7f3-976508bd7252}">
      <Declaration><![CDATA[METHOD GetLreal : LREAL
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 
1:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].AbsoluteHigh;
2:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].AbsoluteLow;
3:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].ExtruderComp;
4:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].KpCool;
5:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].KpHeat;
6:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TdCool;
7:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TdHeat;
8:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TnCool;
9:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TnHeat;
10:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TvCool;
11:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TvHeat;
12:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Overshoot;
13:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Tracking_Rate;
14:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Tracking_Td;
15:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Ramping_Rate;
16:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Ramping_RateC;
17:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Ramping_Tolerance;
18:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].dTmax;
19:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].SensorOffset;
20:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].SettlingTime;
21:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Cooler;
22:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Heater;
23:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Tolerance;
24:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneEnd;
25:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneKp;
26:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneTd;
27:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneTn;
28:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneTv;
29:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneTrackingTd;
30:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].TuneY;
31:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].L_LoadIdle;
32:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].Weighting_C;
33:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].ErrorHeatingFactor;
34:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].fPwmStdMaxOnTime;
35:(*
	F_GetMParamLreal:=aaaPfwTempMparamFromHmi[nZone].fPwmMaxOnTime;
	*)
	GetLreal:=0.0;
36:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].fPwmMinOnTime;
37:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].fc_OnTime;
38:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].fc_OffTime;
39:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].ActTempGain;
40:
	GetLreal:=aaaPfwTempMparamFromHmi[nZone].ActTempOffset;
	
ELSE
	GetLreal:=0.0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetLreal" Id="{69f305ac-6f14-4ea3-af15-87665102d338}">
      <Declaration><![CDATA[METHOD SetLreal : LREAL
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
	fValue:	LREAL;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 
1:
	aaaPfwTempMparamFromHmi[nZone].AbsoluteHigh:=fValue;
2:
	aaaPfwTempMparamFromHmi[nZone].AbsoluteLow:=fValue;
3:
	aaaPfwTempMparamFromHmi[nZone].ExtruderComp:=fValue;
4:
	aaaPfwTempMparamFromHmi[nZone].KpCool:=fValue;
5:
	aaaPfwTempMparamFromHmi[nZone].KpHeat:=fValue;
6:
	aaaPfwTempMparamFromHmi[nZone].TdCool:=fValue;
7:
	aaaPfwTempMparamFromHmi[nZone].TdHeat:=fValue;
8:
	aaaPfwTempMparamFromHmi[nZone].TnCool:=fValue;
9:
	aaaPfwTempMparamFromHmi[nZone].TnHeat:=fValue;
10:
	aaaPfwTempMparamFromHmi[nZone].TvCool:=fValue;
11:
	aaaPfwTempMparamFromHmi[nZone].TvHeat:=fValue;
12:
	aaaPfwTempMparamFromHmi[nZone].Overshoot:=fValue;
13:
	aaaPfwTempMparamFromHmi[nZone].Tracking_Rate:=fValue;
14:
	aaaPfwTempMparamFromHmi[nZone].Tracking_Td:=fValue;
15:
	aaaPfwTempMparamFromHmi[nZone].Ramping_Rate:=fValue;
16:
	aaaPfwTempMparamFromHmi[nZone].Ramping_RateC:=fValue;
17:
	aaaPfwTempMparamFromHmi[nZone].Ramping_Tolerance:=fValue;
18:
	aaaPfwTempMparamFromHmi[nZone].dTmax:=fValue;
19:
	aaaPfwTempMparamFromHmi[nZone].SensorOffset:=fValue;
20:
	aaaPfwTempMparamFromHmi[nZone].SettlingTime:=fValue;
21:
	aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Cooler:=fValue;
22:
	aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Heater:=fValue;
23:
	aaaPfwTempMparamFromHmi[nZone].SupplyLoad_Tolerance:=fValue;
24:
	aaaPfwTempMparamFromHmi[nZone].TuneEnd:=fValue;
25:
	aaaPfwTempMparamFromHmi[nZone].TuneKp:=fValue;
26:
	aaaPfwTempMparamFromHmi[nZone].TuneTd:=fValue;
27:
	aaaPfwTempMparamFromHmi[nZone].TuneTn:=fValue;
28:
	aaaPfwTempMparamFromHmi[nZone].TuneTv:=fValue;
29:
	aaaPfwTempMparamFromHmi[nZone].TuneTrackingTd:=fValue;
30:
	aaaPfwTempMparamFromHmi[nZone].TuneY:=fValue;
31:
	aaaPfwTempMparamFromHmi[nZone].L_LoadIdle:=fValue;
32:
	aaaPfwTempMparamFromHmi[nZone].Weighting_C:=fValue;
33:
	aaaPfwTempMparamFromHmi[nZone].ErrorHeatingFactor:=fValue;
34:
	aaaPfwTempMparamFromHmi[nZone].fPwmStdMaxOnTime:=fValue;
35:(*
	F_GetMParamLreal:=aaaPfwTempMparamFromHmi[nZone].fPwmMaxOnTime;
	*)
	;
36:
	aaaPfwTempMparamFromHmi[nZone].fPwmMinOnTime:=fValue;
37:
	aaaPfwTempMparamFromHmi[nZone].fc_OnTime:=fValue;
38:
	aaaPfwTempMparamFromHmi[nZone].fc_OffTime:=fValue;
39:
	aaaPfwTempMparamFromHmi[nZone].ActTempGain:=fValue;
40:
	aaaPfwTempMparamFromHmi[nZone].ActTempOffset:=fValue;
	
ELSE
	;
END_CASE

stParamsUnsave.mParams[nZone]:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBool" Id="{89e02819-78fb-4a47-90eb-b602a0174e98}">
      <Declaration><![CDATA[METHOD SetBool : BOOL
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 

1:
	aaaPfwTempMparamFromHmi[nZone].UseCooling:= NOT aaaPfwTempMparamFromHmi[nZone].UseCooling;
2:
	aaaPfwTempMparamFromHmi[nZone].ExtruderCompEna:= NOT aaaPfwTempMparamFromHmi[nZone].ExtruderCompEna;
3:
	aaaPfwTempMparamFromHmi[nZone].TuneCooling:= NOT aaaPfwTempMparamFromHmi[nZone].TuneCooling;
4:
	aaaPfwTempMparamFromHmi[nZone].Tune_IdleLoad:= NOT aaaPfwTempMparamFromHmi[nZone].Tune_IdleLoad;
5:
	aaaPfwTempMparamFromHmi[nZone].Autotune:= NOT aaaPfwTempMparamFromHmi[nZone].Autotune;
6:
	aaaPfwTempMparamFromHmi[nZone].Enable:= NOT aaaPfwTempMparamFromHmi[nZone].Enable;
7:
	aaaPfwTempMparamFromHmi[nZone].Update:= NOT aaaPfwTempMparamFromHmi[nZone].Update;
8:
	aaaPfwTempMparamFromHmi[nZone].EnaExtruderBlock:= NOT aaaPfwTempMparamFromHmi[nZone].EnaExtruderBlock;
9:
	aaaPfwTempMparamFromHmi[nZone].NoFanWhileTrackDown:= NOT aaaPfwTempMparamFromHmi[nZone].NoFanWhileTrackDown;
10:
	aaaPfwTempMparamFromHmi[nZone].Ena_TuneIdleLoad:= NOT aaaPfwTempMparamFromHmi[nZone].Ena_TuneIdleLoad;
11:
	aaaPfwTempMparamFromHmi[nZone].LooptestUpdate:= NOT aaaPfwTempMparamFromHmi[nZone].LooptestUpdate;
12:
	aaaPfwTempMparamFromHmi[nZone].EnableErrorHeating:= NOT aaaPfwTempMparamFromHmi[nZone].EnableErrorHeating;
13:
	aaaPfwTempMparamFromHmi[nZone].ReadBack:= NOT aaaPfwTempMparamFromHmi[nZone].ReadBack;
14:
	aaaPfwTempMparamFromHmi[nZone].TuneExtruderComp:= NOT aaaPfwTempMparamFromHmi[nZone].TuneExtruderComp;
15:
	aaaPfwTempMparamFromHmi[nZone].TuneHeaterLoad:= NOT aaaPfwTempMparamFromHmi[nZone].TuneHeaterLoad;
16:
	aaaPfwTempMparamFromHmi[nZone].OpenloopHeating:= NOT aaaPfwTempMparamFromHmi[nZone].OpenloopHeating;
17:
	aaaPfwTempMparamFromHmi[nZone].fc_Enable:= NOT aaaPfwTempMparamFromHmi[nZone].fc_Enable;
18:
	aaaPfwTempMparamFromHmi[nZone].HibernateI_Cool:= NOT aaaPfwTempMparamFromHmi[nZone].HibernateI_Cool;
19:
	aaaPfwTempMparamFromHmi[nZone].hibernateI_Heat:= NOT aaaPfwTempMparamFromHmi[nZone].hibernateI_Heat;
20:
	aaaPfwTempMparamFromHmi[nZone].bSavingParams:= NOT aaaPfwTempMparamFromHmi[nZone].bSavingParams;
21:
	aaaPfwTempMparamFromHmi[nZone].bLoadParams:= NOT aaaPfwTempMparamFromHmi[nZone].bLoadParams;

ELSE
	SetBool:=FALSE;
END_CASE

stParamsUnsave.mParams[nZone]:=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetInt" Id="{91c5837c-090a-4848-9fa9-767cac5d8ceb}">
      <Declaration><![CDATA[METHOD GetInt : INT
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 
1:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].App_HmiType;
2:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].TermChannel;
3:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].ExtruderId;
4:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].ModuleId;
5:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].ZoneId;
6:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].SupplyId;
7:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].CJ_CompMode;
8:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].CJ_CompZone;
9:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].SensTermSwapIdx;
10:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].HeaterSwapIdx;
11:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].CoolerSwapIdx;
12:
	GetInt:=aaaPfwTempMparamFromHmi[nZone].nPwmFactorC;

ELSE
	GetInt:=0;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetBool" Id="{dcef91f5-9aab-4e0a-ba46-f4b153d8107f}">
      <Declaration><![CDATA[METHOD GetBool : BOOL
VAR_INPUT
	nZone:	INT;
	nIdx:	INT;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nIdx OF 

1:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].UseCooling;
2:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].ExtruderCompEna;
3:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].TuneCooling;
4:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].Tune_IdleLoad;
5:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].Autotune;
6:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].Enable;
7:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].Update;
8:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].EnaExtruderBlock;
9:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].NoFanWhileTrackDown;
10:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].Ena_TuneIdleLoad;
11:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].LooptestUpdate;
12:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].EnableErrorHeating;
13:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].ReadBack;
14:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].TuneExtruderComp;
15:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].TuneHeaterLoad;
16:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].OpenloopHeating;
17:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].fc_Enable;
18:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].HibernateI_Cool;
19:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].hibernateI_Heat;
20:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].bSavingParams;
21:
	GetBool:=aaaPfwTempMparamFromHmi[nZone].bLoadParams;

ELSE
	GetBool:=FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>