<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Setpoint_Generator" Id="{ba46414f-087c-4b1c-8465-4eeebd5edc8b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Setpoint_Generator
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fManValue							: LREAL;
	eMode								: E_CTRL_MODE;
	nSetpointIndex						: INT		:= 3;
	fCurrentSetpoint					: LREAL;
	bValueReached						: BOOL;

	fbCTRL_SETPOINT_GENERATOR			: FB_CTRL_SETPOINT_GENERATOR;
	stCTRL_SETPOINT_GENERATOR_PARAMS	: ST_CTRL_SETPOINT_GENERATOR_PARAMS;
	arSetpointTable						: ARRAY [1..4] OF FLOAT;

	eErrorId							: E_CTRL_ERRORCODES;
	bError								: BOOL;

	bInit								: BOOL := TRUE;
	fbTON								: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bInit THEN
	(* init the setpoint array *)
	arSetpointTable[ 1 ]	:= 12;
	arSetpointTable[ 2 ]	:= 25;
	arSetpointTable[ 3 ]	:= 42;
	arSetpointTable[ 4 ]	:= 73;

	(* init parameter struct *)
	stCTRL_SETPOINT_GENERATOR_PARAMS.tTaskCycleTime				:= T#10MS;
	stCTRL_SETPOINT_GENERATOR_PARAMS.tCtrlCycleTime				:= T#10MS;
	stCTRL_SETPOINT_GENERATOR_PARAMS.bDisableRamping			:= FALSE;
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloNeg					:= 10;
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloPos					:= 8;
	stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_NumberOfRows	:= 4;

	(* set the mode to ACTIVE --> normal operation *)
	eMode := eCTRL_MODE_ACTIVE;

	(* reset init flag *)
	bInit := FALSE;
END_IF

(* set the addresses *)
stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_SIZEOF			:= SIZEOF(arSetpointTable);
stCTRL_SETPOINT_GENERATOR_PARAMS.pDataTable_ADR				:= ADR(arSetpointTable);

(* generate setpoint-index *)
fbTON( IN := TRUE,
		PT	:= T#5s);
IF fbTON.Q
THEN
	nSetpointIndex	:=  nSetpointIndex + 1;
	IF nSetPointIndex > 4
	THEN
		nSetPointIndex := 1;
	END_IF
	fbTON( IN := FALSE);
END_IF


(* copy var to scope var *)
fInToScope := INT_TO_FLOAT(nSetpointIndex);

(* call setpointgenerator *)
fbCTRL_SETPOINT_GENERATOR(	nSetpointIndex		:= nSetpointIndex,
										fManValue				:= fManValue,
										eMode					:= eMode,
										stParams				:= stCTRL_SETPOINT_GENERATOR_PARAMS,
										fOut					=> fCurrentSetpoint,
										bValueReached		=> bValueReached
										 );

(* copy var to scope var *)
fOutToScope := fCurrentSetpoint;]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{934b235d-9833-48db-b6f4-391752153908}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Cyclic" Id="{2bbf86ce-9f52-4111-bf2f-dbebf9a0a72b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Cyclic
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_InTarget" Id="{3e592c98-8280-4a07-9f0d-81e7bb9d76b7}">
      <Declaration><![CDATA[METHOD PUBLIC M_InTarget : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Setpoint_Generator">
      <LineId Id="1" Count="53" />
    </LineIds>
    <LineIds Name="FB_Setpoint_Generator.FB_Init">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Setpoint_Generator.M_Cyclic">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Setpoint_Generator.M_InTarget">
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>