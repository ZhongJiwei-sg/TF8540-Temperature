<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Setpoint_Generator" Id="{ba46414f-087c-4b1c-8465-4eeebd5edc8b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Setpoint_Generator
VAR CONSTANT
	nNoOfRows											: INT:= 45;
END_VAR
VAR
	fManValue											: LREAL;
	eMode												: E_CTRL_MODE;
	nSetpointIndex										: INT:= 3;
	fCurrentSetpoint									: LREAL;
	bValueReached										: BOOL;

	fbCTRL_SETPOINT_GENERATOR							: FB_CTRL_SETPOINT_GENERATOR;
	stCTRL_SETPOINT_GENERATOR_PARAMS					: ST_CTRL_SETPOINT_GENERATOR_PARAMS;
	arrSetpointTable									: ARRAY [1..nNoOfRows] OF FLOAT;

	eErrorId											: E_CTRL_ERRORCODES;
	bError												: BOOL;

	bInit, bUpdate										: BOOL	:= TRUE;
	fbTON												: TON;
	
	fbGetCurTaskIdx 									: GETCURTASKINDEX;
	bFirstCycle											: BOOL;
	fCycleTime											: LREAL := 0.025;
//	Scope
	fInToScope											: LREAL;
	fOutToScope											: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =========================================================
	// Get task first cycle flag	
fbGetCurTaskIdx(); 
bFirstCycle:= _TaskInfo[fbGetCurTaskIdx.index].FirstCycle;

IF bFirstCycle THEN
	;
END_IF

// Get Cycle Time
IF(GETCURTASKINDEXEX()<=0)THEN
	fCycletime:= TO_LREAL(0.025);(* Don't know, just guessing *)
ELSE
	fCycletime:= UDINT_TO_LREAL(_TaskInfo[GETCURTASKINDEXEX()].cycleTime)/10000000.0;
END_IF

// =========================================================

(*
IF bInit THEN
	(* init the setpoint array *)
	arSetpointTable[ 1 ]	:= 12;
	arSetpointTable[ 2 ]	:= 25;
	arSetpointTable[ 3 ]	:= 42;
	arSetpointTable[ 4 ]	:= 73;

	(* init parameter struct *)
	stCTRL_SETPOINT_GENERATOR_PARAMS.tTaskCycleTime				:= T#10MS;
	stCTRL_SETPOINT_GENERATOR_PARAMS.tCtrlCycleTime				:= T#10MS;
	stCTRL_SETPOINT_GENERATOR_PARAMS.bDisableRamping			:= FALSE;
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloNeg					:= 10;
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloPos					:= 8;
	stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_NumberOfRows	:= 4;

	(* set the mode to ACTIVE --> normal operation *)
	eMode := eCTRL_MODE_ACTIVE;

	(* reset init flag *)
	bInit := FALSE;
END_IF
*)

(*
(* set the addresses *)
stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_SIZEOF			:= SIZEOF(arSetpointTable);
stCTRL_SETPOINT_GENERATOR_PARAMS.pDataTable_ADR				:= ADR(arSetpointTable);

(* generate setpoint-index *)
fbTON( IN := TRUE,
		PT	:= T#5s);
IF fbTON.Q
THEN
	nSetpointIndex	:=  nSetpointIndex + 1;
	IF nSetPointIndex > 4
	THEN
		nSetPointIndex := 1;
	END_IF
	fbTON( IN := FALSE);
END_IF


(* copy var to scope var *)
fInToScope := INT_TO_FLOAT(nSetpointIndex);

(* call setpointgenerator *)
fbCTRL_SETPOINT_GENERATOR(	nSetpointIndex		:= nSetpointIndex,
										fManValue				:= fManValue,
										eMode					:= eMode,
										stParams				:= stCTRL_SETPOINT_GENERATOR_PARAMS,
										fOut					=> fCurrentSetpoint,
										bValueReached		=> bValueReached
										 );

(* copy var to scope var *)
fOutToScope := fCurrentSetpoint;
*)]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{934b235d-9833-48db-b6f4-391752153908}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
(* Init the setpoint array *)
arrSetpointTable[ 1 ]	:= 25;
arrSetpointTable[ 2 ]	:= 30;
arrSetpointTable[ 3 ]	:= 35;
arrSetpointTable[ 4 ]	:= 40;
arrSetpointTable[ 5 ]	:= 45;
arrSetpointTable[ 6 ]	:= 50;
arrSetpointTable[ 7 ]	:= 55;
arrSetpointTable[ 8 ]	:= 60;
arrSetpointTable[ 9 ]	:= 65;
arrSetpointTable[ 10 ]	:= 70;
arrSetpointTable[ 11 ]	:= 75;
arrSetpointTable[ 12 ]	:= 80;
arrSetpointTable[ 13 ]	:= 85;
arrSetpointTable[ 14 ]	:= 90;
arrSetpointTable[ 15 ]	:= 95;
arrSetpointTable[ 16 ]	:= 100;
arrSetpointTable[ 17 ]	:= 105;
arrSetpointTable[ 18 ]	:= 110;
arrSetpointTable[ 19 ]	:= 115;
arrSetpointTable[ 20 ]	:= 120;
arrSetpointTable[ 21 ]	:= 125;
arrSetpointTable[ 22 ]	:= 130;
arrSetpointTable[ 23 ]	:= 135;
arrSetpointTable[ 24 ]	:= 140;
arrSetpointTable[ 25 ]	:= 145;
arrSetpointTable[ 26 ]	:= 150;
arrSetpointTable[ 27 ]	:= 155;
arrSetpointTable[ 28 ]	:= 160;
arrSetpointTable[ 29 ]	:= 165;
arrSetpointTable[ 30 ]	:= 170;
arrSetpointTable[ 31 ]	:= 175;
arrSetpointTable[ 32 ]	:= 180;
arrSetpointTable[ 33 ]	:= 185;
arrSetpointTable[ 34 ]	:= 190;
arrSetpointTable[ 35 ]	:= 195;
arrSetpointTable[ 36 ]	:= 200;
arrSetpointTable[ 37 ]	:= 205;
arrSetpointTable[ 38 ]	:= 210;
arrSetpointTable[ 39 ]	:= 215;
arrSetpointTable[ 40 ]	:= 220;
arrSetpointTable[ 41 ]	:= 225;
arrSetpointTable[ 42 ]	:= 230;
arrSetpointTable[ 43 ]	:= 235;
arrSetpointTable[ 44 ]	:= 240;
arrSetpointTable[ 45 ]	:= 245;

(*
(* Init parameter struct *)
stCTRL_SETPOINT_GENERATOR_PARAMS.tTaskCycleTime				:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
stCTRL_SETPOINT_GENERATOR_PARAMS.tCtrlCycleTime				:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
stCTRL_SETPOINT_GENERATOR_PARAMS.bDisableRamping			:= FALSE;
stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloNeg					:= 10;
stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloPos					:= 8;
stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_NumberOfRows	:= 4;

(* Set the mode to ACTIVE --> normal operation *)
eMode := eCTRL_MODE_ACTIVE;
*)
// =========================================================

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Cyclic" Id="{2bbf86ce-9f52-4111-bf2f-dbebf9a0a72b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Cyclic
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
IF bInit OR bUpdate THEN
	(* Init parameter struct *)
	stCTRL_SETPOINT_GENERATOR_PARAMS.tTaskCycleTime				:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
	stCTRL_SETPOINT_GENERATOR_PARAMS.tCtrlCycleTime				:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
	stCTRL_SETPOINT_GENERATOR_PARAMS.bDisableRamping			:= FALSE; (*A continuous output value is not calculated if this parameter is TRUE. There is a step change between the output values*)
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloNeg					:= 10; (* In units per second *)
	stCTRL_SETPOINT_GENERATOR_PARAMS.fVeloPos					:= 8;  (* In units per second *)
	stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_NumberOfRows	:= nNoOfRows;

	(* Set the mode to ACTIVE --> normal operation *)
	eMode := eCTRL_MODE_ACTIVE;
	(* Reset the init flag *)
	bInit := FALSE;
	(* Reset the update flag *)
	bUpdate := FALSE;
END_IF

(* Set the address *)
stCTRL_SETPOINT_GENERATOR_PARAMS.nDataTable_SIZEOF			:= SIZEOF(arrSetpointTable);
stCTRL_SETPOINT_GENERATOR_PARAMS.pDataTable_ADR				:= ADR(arrSetpointTable);

(* Generate setpoint-index *)
fbTON( IN := TRUE, PT:= T#5S);
IF fbTON.Q
THEN
	nSetpointIndex	:=  nSetpointIndex + 1;
	IF nSetPointIndex > nNoOfRows
	THEN
		nSetPointIndex := 1;
	END_IF
	fbTON( IN := FALSE);
END_IF

(* Copy var to scope var *)
fInToScope := INT_TO_FLOAT(nSetpointIndex);

(* Call setpointgenerator *)
fbCTRL_SETPOINT_GENERATOR(nSetpointIndex:= nSetpointIndex,
										fManValue				:= fManValue,
										eMode					:= eMode,
										stParams				:= stCTRL_SETPOINT_GENERATOR_PARAMS,
										fOut					=> fCurrentSetpoint,
										bValueReached		=> bValueReached
										 );

(* Copy var to scope var *)
fOutToScope := fCurrentSetpoint;

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Setpoint_Generator">
      <LineId Id="1" Count="75" />
    </LineIds>
    <LineIds Name="FB_Setpoint_Generator.FB_Init">
      <LineId Id="1" Count="62" />
    </LineIds>
    <LineIds Name="FB_Setpoint_Generator.M_Cyclic">
      <LineId Id="1" Count="49" />
    </LineIds>
  </POU>
</TcPlcObject>