<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Ramp_Generator" Id="{00e25aef-eb31-44c5-b22a-b60ab6dcc24a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Ramp_Generator
VAR CONSTANT
END_VAR
VAR
	(* Input *)
	bEnable												: BOOL		:= TRUE;
	fStart												: LREAL;
	fTarget												: LREAL		:= 	50.0;
	(* Output *)
	fOut												: LREAL;
	bValueReached										: BOOL;
	(* Function block *)
	fbCTRL_RAMP_GENERATOR								: FB_CTRL_RAMP_GENERATOR;
	stCTRL_RAMP_GENERATOR_PARAMS						: ST_CTRL_RAMP_GENERATOR_PARAMS;
	eErrorId											: E_CTRL_ERRORCODES;
	bError												: BOOL;
	bInit, bUpdate										: BOOL	:= TRUE;
	fbTON												: TON;	
	fbGetCurTaskIdx 									: GETCURTASKINDEX;
	bFirstCycle											: BOOL;
	fCycleTime											: LREAL := 0.025;
	stRampGenerator										: ST_Ramp_Generator;
//	Scope
	fInToScope											: LREAL;
	fOutToScope											: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =========================================================
	// Get task first cycle flag	
fbGetCurTaskIdx(); 
bFirstCycle:= _TaskInfo[fbGetCurTaskIdx.index].FirstCycle;

IF bFirstCycle THEN
	;
END_IF

// Get Cycle Time
IF(GETCURTASKINDEXEX()<=0)THEN
	fCycletime:= TO_LREAL(0.025);(* Don't know, just guessing *)
ELSE
	fCycletime:= UDINT_TO_LREAL(_TaskInfo[GETCURTASKINDEXEX()].cycleTime)/10000000.0;
END_IF

// =========================================================]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{3164f709-7d5d-4ba8-a1aa-6c89b25bbc12}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
	(* Init parameter struct *)
	stCTRL_RAMP_GENERATOR_PARAMS.tTaskCycleTime		:= T#10MS;
	stCTRL_RAMP_GENERATOR_PARAMS.tCtrlCycleTime		:= T#10MS;
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloPos			:= 20; (* in units per second *)
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloNeg			:= 40; (* in units per second *)

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Cyclic" Id="{3328f87e-c500-453f-b9b0-1afa8ddb5d01}">
      <Declaration><![CDATA[METHOD PUBLIC M_Cyclic
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =========================================================
IF bInit OR bUpdate THEN
	(* Init parameter struct *)
	stCTRL_RAMP_GENERATOR_PARAMS.tTaskCycleTime		:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
	stCTRL_RAMP_GENERATOR_PARAMS.tCtrlCycleTime		:= UDINT_TO_TIME(_TaskInfo[GETCURTASKINDEXEX()].cycleTime/10000);
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloPos			:= 20; (* In units per second *)
	stCTRL_RAMP_GENERATOR_PARAMS.fVeloNeg			:= 40; (* In units per second *)
	(* Reset the init flag *)
	bInit := FALSE;
	(* Reset the update flag *)
	bUpdate := FALSE;
END_IF

(* Generate target value *)
fbTON(IN:= TRUE, PT	:= T#6S);	
IF fbTON.Q THEN
	fTarget := -1.0 * fTarget;
	fbTON(	 IN	:= FALSE);
END_IF

(* Copy var to scope var *)
fInToScope := fTarget;

(* Call function block *)
fbCTRL_RAMP_GENERATOR(	bEnable			:= bEnable,
						fStart			:= fStart,
						fTarget			:= fTarget,
						stParams		:= stCTRL_RAMP_GENERATOR_PARAMS,
						fOut			=> fOut,
						bValueReached	=> bValueReached,
						bError			=> bError,
						eErrorId		=> eErrorId);

(* Copy var to scope var *)
fOutToScope := fOut;

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Ramp_Generator">
      <LineId Id="1" Count="16" />
    </LineIds>
    <LineIds Name="FB_Ramp_Generator.FB_Init">
      <LineId Id="1" Count="7" />
    </LineIds>
    <LineIds Name="FB_Ramp_Generator.M_Cyclic">
      <LineId Id="1" Count="36" />
    </LineIds>
  </POU>
</TcPlcObject>